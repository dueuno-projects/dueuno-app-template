import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

buildscript {
    repositories {
        mavenCentral()
        maven { url = "https://repo.grails.org/grails/restricted" }
    }
    dependencies { // Not Published to Gradle Plugin Portal
        classpath "cloud.wondrify:asset-pipeline-gradle"
        classpath platform("org.apache.grails:grails-bom:$grailsVersion")
        classpath "org.apache.grails:grails-data-hibernate5"
        classpath "org.apache.grails:grails-gradle-plugins"
    }
}

plugins {
    id "groovy"
    id "com.bmuschko.docker-remote-api" version "9.4.0"
    id "com.avast.gradle.docker-compose" version "0.17.12"
    id "org.asciidoctor.jvm.convert" version "4.0.5"
    id "org.asciidoctor.jvm.pdf" version "4.0.5"
    id "codenarc"
    id "eclipse"
    id "idea"
}

// Not Published to Gradle Plugin Portal
apply plugin: "org.apache.grails.gradle.grails-web"
apply plugin: "org.apache.grails.gradle.grails-gsp"
apply plugin: "cloud.wondrify.asset-pipeline"

group = "dueunoapp"

configurations {
    all {
        // Fetches dependencies as soon as they are released on the server
        resolutionStrategy.cacheChangingModulesFor 0, "seconds"
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url = "https://repo.grails.org/grails/restricted" }
    maven { url = "https://ossrh-staging-api.central.sonatype.com/service/local/" }
    maven { url = "http://repo.dueuno.com:8888/repository/release"; allowInsecureProtocol = true }
}

dependencies {
    profile "org.apache.grails.profiles:web"
    testAndDevelopmentOnly "org.webjars.npm:bootstrap"
    testAndDevelopmentOnly "org.webjars.npm:bootstrap-icons"
    testAndDevelopmentOnly "org.webjars.npm:jquery"
    implementation platform("org.apache.grails:grails-bom:$grailsVersion")
    implementation "org.apache.grails:grails-core"
    implementation "org.apache.grails:grails-data-hibernate5"
    implementation "org.apache.grails:grails-databinding"
    implementation "org.apache.grails:grails-events"
    implementation "org.apache.grails:grails-gsp"
    implementation "org.apache.grails:grails-interceptors"
    implementation "org.apache.grails:grails-layout"
    implementation "org.apache.grails:grails-logging"
    implementation "org.apache.grails:grails-rest-transforms"
    implementation "org.apache.grails:grails-scaffolding"
    implementation "org.apache.grails:grails-services"
    implementation "org.apache.grails:grails-url-mappings"
    implementation "org.apache.grails:grails-web-boot"
    implementation "org.springframework.boot:spring-boot-autoconfigure"
    implementation "org.springframework.boot:spring-boot-starter"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-starter-tomcat"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    console "org.apache.grails:grails-console"
    runtimeOnly "cloud.wondrify:asset-pipeline-grails"
    runtimeOnly "com.h2database:h2"
    runtimeOnly "com.zaxxer:HikariCP"
    runtimeOnly "org.fusesource.jansi:jansi"
    integrationTestImplementation testFixtures("org.apache.grails:grails-geb")
    testImplementation "org.apache.grails:grails-testing-support-datamapping"
    testImplementation "org.apache.grails:grails-testing-support-web"
    testImplementation "org.spockframework:spock-core"

    // Comment this if you need to create tenants at runtime in dev environment
    // Spring Boot DevTools may cause performance slowdowns or compatibility issues on larger applications
    developmentOnly "org.springframework.boot:spring-boot-devtools"

    // DUEUNO
    implementation "org.dueuno:elements-core:${dueunoElementsVersion}"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(javaVersion)
    }
}

bootRun {
    jvmArgs(
            "-Xms1g",
            "-Xmx1g",
    )
}

tasks.withType(Test) {
    useJUnitPlatform()
}

assets {
    minifyCss = true
    minifyJs = true
    minifyOptions = [
            //SIMPLE (default) or ADVANCED or WHITESPACE_ONLY
            optimizationLevel: "SIMPLE",
    ]
    excludes = [
            "webjars/jquery/**",
            "webjars/bootstrap/**",
            "webjars/bootstrap-icons/**"
    ]
    includes = [
            "webjars/jquery/*/dist/jquery.js",
            "webjars/bootstrap/*/dist/js/bootstrap.bundle.js",
            "webjars/bootstrap/*/dist/css/bootstrap.css",
            "webjars/bootstrap-icons/*/font/bootstrap-icons.css",
            "webjars/bootstrap-icons/*/font/fonts/*",
    ]
}

// CODE ANALISYS
codenarc {
    toolVersion = "3.4.0"
    ignoreFailures = true
    configFile = file("${rootDir}/codenarc/config.groovy")
    reportsDir = file("$rootDir/codenarc/${project.name}")
}

// DOCUMENTATION
compileGroovy.finalizedBy(asciidoctor)
asciidoctor {
    baseDirFollowsSourceDir()
    attributes = [
            "application-name"  : project.name,
            "revnumber"         : project.version,
            "grails-version"    : grailsVersion,
            "source-highlighter": "coderay",
            "icons"             : "font",
            "toc"               : "left",
            "toclevels"         : 3,
    ]
    outputOptions {
        backends = ["html5"] // or ["html5", "pdf"]
    }
    doLast {
        copy {
            from("build/docs/asciidoc/")
            into "${projectDir}/docs/"
        }
    }
}

ext {
    dockerTag = "${project.group}/${project.name}:${project.version}".toLowerCase()
    dockerBuildDir = mkdir("${buildDir}/docker")
}

task prepareDocker(type: Copy, dependsOn: bootJar) {
    description = "Copy files from src/main/docker and application jar to Docker temporal build directory"
    group = "Docker"

    from "src/main/docker"
    from project.bootJar

    into dockerBuildDir
}

task createDockerfile(type: Dockerfile, dependsOn: prepareDocker) {
    description = "Create a Dockerfile file"
    group = "Docker"

    destFile = project.file("${dockerBuildDir}/Dockerfile")

    from "eclipse-temurin:17"
    workingDir "/app"
    def filename = bootJar.archiveFileName.get()
    copyFile filename, filename
    entryPoint "java", "-jar", "/app/${filename}"
    exposePort 8080
}

task dockerBuildImage(type: DockerBuildImage, dependsOn: createDockerfile) {
    description = "Create Docker image to run the Grails application"
    group = "Docker"

    inputDir = file(dockerBuildDir)
    images.add(dockerTag)
}

composeUp.dependsOn(dockerBuildImage)

dockerCompose {
    useComposeFiles = ["docker-compose.yml"]
}